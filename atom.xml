<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蓝色的博客</title>
  
  <subtitle>RBK</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bluerbk.top/"/>
  <updated>2018-03-17T16:13:04.653Z</updated>
  <id>https://bluerbk.top/</id>
  
  <author>
    <name>Borui Kang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C#基础伪教程（一）</title>
    <link href="https://bluerbk.top/2018/03/17/C-First-Teaching/"/>
    <id>https://bluerbk.top/2018/03/17/C-First-Teaching/</id>
    <published>2018-03-17T15:56:30.000Z</published>
    <updated>2018-03-17T16:13:04.653Z</updated>
    
    <content type="html"><![CDATA[<p>由于之前学过Java的相关知识，但是由于Java在桌面程序表现的无力，决定选择新的语言，在QT和C#中还是选择了C#，不瞎扯了，我也不会扯，简单粗暴一点，C#语法和Java也很类似。<br>老规矩，我写的教程一向都是伪教程，指不定哪天我都看不懂的那种。</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>我采用的是VSCode工具，虽然我也有VS2013，但是它的体积真的很庞大，写点小代码不太划算，还相当占内存。于是我采用VSCode。<br>首先得添加C#插件，<a href="https://www.microsoft.com/net/download/windows" target="_blank" rel="noopener">点击此处下载.NET Core SDK</a><br>随后安装，成功后重启VSCode<br>打开cmd控制台，任意进入一个路径，执行命令</p><pre><code>dotnet new console dotnet run</code></pre><p>第一个是在当前目录下创建C#控制台程序，第二个命令是运行程序，默认为输出”HelloWorld！“。随后在VSCode中打开对应目录下的.cs文件，进行编写，编译执行即可</p><h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><p>下面一段C#的代码</p><pre><code>using System;namespace C_{    class Program    {        static void Main(string[] args)        {                Console.Write(&quot;Hello,&quot;);            Console.WriteLine(&quot;World&quot;);        }    }}</code></pre><p>由上可见，C#代码包含命名空间，类名和函数名。与其他语言的区别有这些，主函数名为Main，而不是main，类Console在System命名空间中，调用Console类中的Write()和WriteLine()方法向控制台进行输出。<br>Ps.第一个末尾不带换行，第二个自带换行。<br>一个简单的C#程序就编写成功了。</p><h2 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h2><p>如下代码示例装箱<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int val=100;</span><br><span class="line">object obj=val;</span><br><span class="line">Console.WriteLine(&quot;对象的值为=&#123;0&#125;&quot;,obj);</span><br></pre></td></tr></table></figure></p><p>object为任意类型，使用一个非泛型容器，保证其通用性。<br>拆箱示例如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int val=100;</span><br><span class="line">object obj=val;</span><br><span class="line">int num=(int)obj;</span><br><span class="line">Console.WrtieLine(&quot;num=&#123;0&#125;&quot;,num);</span><br></pre></td></tr></table></figure></p><p>可以转换成原本属于的类型，也可以强制转换到任意可以相容的容易，所以必须显式强制类型转换。</p><h2 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h2><p>像for(;;)、while()、do … while ();、if、switch等几乎通用，便不多赘述。在此写一个C#新见的一种循环，和用过的迭代器很像。<br>foreach (变量生命 in 数组名或集合类），代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int[] num=new int [5]&#123;1,2,3,4,5&#125;;</span><br><span class="line">foreach (int i in num)</span><br><span class="line">&#123;</span><br><span class="line">Console.Write(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出为：12345</p><hr><p>跳转语句，例如goto，continue等，也和其他语言区别不大。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>按照Java的方式，如获得一个int数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int[] num=new int[3]&#123;1,2,3&#125;;</span><br><span class="line">int[] num=&#123;1,2,3&#125;;</span><br></pre></td></tr></table></figure></p><p>可以通过这样进行数组的初始化赋值。<br>二维数组，如下例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int[,] num=new int[3,3]&#123;...&#125;;</span><br><span class="line">int[,] num=&#123;</span><br><span class="line">&#123;3,3,3&#125;,</span><br><span class="line">&#123;2,2,2&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>多维数组同二维数组，如[,]变为[,,]即可。</p><h4 id="交错数组"><a href="#交错数组" class="headerlink" title="交错数组"></a>交错数组</h4><p>即不规则数组<br>如如下定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int[][] inter=new int[3][];</span><br><span class="line">inter[0]=new int[4]&#123;1,2,3,4&#125;;</span><br><span class="line">inter[1]=new int[3]&#123;1,2,3&#125;;</span><br><span class="line">inter[2]=new int[5]&#123;1,2,3,4,5&#125;;</span><br></pre></td></tr></table></figure></p><p>即inter数组内容为下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4</span><br><span class="line">1 2 3</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure></p><p>上面说的数组都是静态数组，在<strong>System.Array</strong>类中针对静态数组提供了一些操作的属性及方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Length//数组长度，为32位整数</span><br><span class="line">LongLength//数组长度，为64位整数</span><br><span class="line">Rank//数组的秩，即维度</span><br><span class="line">IsReadOnly//数组是否可读</span><br><span class="line">IsFixedSize//数组大小是否固定</span><br><span class="line">IsSynchronized//是否同步访问数组</span><br><span class="line">SyncRoot//获取同步访问数组的对象</span><br><span class="line"></span><br><span class="line">GetValue()//获取指定元素的值</span><br><span class="line">SetValue()//设置指定元素的值</span><br><span class="line">Clear（）//清除数组的所有元素</span><br><span class="line">IndexOf()//获取匹配的第一个元素的索引</span><br><span class="line">LaseIndexOf()//获取匹配的最后一个元素的索引</span><br><span class="line">Sort()//对一维数组排序</span><br><span class="line">Reverse()//反转一维数组的元素</span><br><span class="line">GetLength()//获取指定唯独数组的元素数量，32位整数</span><br><span class="line">GetLongLength//获取指定维度的数组的元素数量，64位整数</span><br><span class="line">FindIndex()//搜索指定元素，并获取第一个匹配元素的索引</span><br><span class="line">FindLastIndex()//搜索指定元素，并获取最后一个匹配元素的索引</span><br><span class="line">Copy()//复制一个数组的部分元素到另一个数组</span><br><span class="line">CopyTo()//将一维数组中的所有元素复制到另一个一维数组中</span><br><span class="line">Clone()//复制数组</span><br><span class="line">ConstrainedCopy()//指定开始位置，并复制一系列元素到另一个数组</span><br><span class="line">BinarySearch()//二进制搜索算法在一维的排序数组中搜索指定元素</span><br><span class="line">GetLowerBound()//获取数组中指定维度的下限</span><br><span class="line">GetUpperBound()//获取数组中指定维度的上限</span><br></pre></td></tr></table></figure></p><h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><p>动态数组能够在程序的执行中改变数组的长度，可以增加、释放元素所占的空间，又被称为可变数组。这里主要说由System.ArrayList实现得动态数组。<br>需要导入命名空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br></pre></td></tr></table></figure></p><p>创建动态数组对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list=new ArrayList();</span><br></pre></td></tr></table></figure></p><p>ArrayList类的属性及方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Capacity//数组容量</span><br><span class="line">Count //数组元素的数量</span><br><span class="line">IsFixedSize//数组大小是否固定</span><br><span class="line">IsReadOnly//数组是否为只读</span><br><span class="line">IsSynchronized//是否同步访问数组</span><br><span class="line">SyncRoot//获取同步访问数组的对象</span><br><span class="line"></span><br><span class="line">Adapter()//为指定的IList创建ArrayList包装</span><br><span class="line">Add()//将对象添加到ArrayList的尾部</span><br><span class="line">AddRange()//将ICollection的元素添加到ArrayList的尾部</span><br><span class="line">BinarySearch()//使用对分检索算法在已排序的ArrayList或它的一部分查找特定元素</span><br><span class="line">Clear()//移除所有元素</span><br><span class="line">Clone()//创建ArrayList的浅表副本</span><br><span class="line">Contains//确定某元素是否在ArrayList中</span><br><span class="line">CopyTo()//将ArrayList或它的一部分复制到一维数组中</span><br><span class="line">Equals()//确定两个Object实例是否相等</span><br><span class="line">FixedSize()//返回具有固定大小的列表包装，其中的元素允许修改，但不允许添加或移除</span><br><span class="line">GetEnumerator()//返回循环访问ArrayList的枚举数</span><br><span class="line">GetHashCode()//用于特定类型的哈希函数，GetHshCode适合在哈希算法和数据结构（哈希表等）中使用</span><br><span class="line">GetRange()//返回ArrayList，它表示源ArrayList中元素的子集</span><br><span class="line">GetType()//获取当前实例的Type</span><br><span class="line">IndexOf()//返回ArrayList或它的一部分中某个值的第一个匹配项的从零开始的索引</span><br><span class="line">Insert()//将元素插入ArrayList指定的索引处</span><br><span class="line">InsertRange()//将集合中的某个元素插入ArrayList的指定索引处</span><br><span class="line">LastIndexOf()//返回ArrayList或它的一部分中某个值的最后一个匹配项的从零开始的索引</span><br><span class="line">ReadOnly()//返回只读的列表包装</span><br><span class="line">ReferenceEquals()//确定指定的Object实例是否是相同的实例</span><br><span class="line">Remove()//从ArrayList移除特定对象的第一个匹配项</span><br><span class="line">RemoveAt()//移除ArrayList的指定索引处的元素</span><br><span class="line">RemoveRange()//从ArrayList中移除一定范围的元素</span><br><span class="line">Repeat()//返回ArrayList，它元素是指定值的副本</span><br><span class="line">Reverse()//将ArrayList或它的一部分元素顺序反转</span><br><span class="line">SetRange()//将集合中的元素复制到ArrayList中的一定范围的元素上</span><br><span class="line">Sort()//堆ArrayList或它的一部分的元素进行排序</span><br><span class="line">Synchronized()//返回同步的（线程安全）列表包装</span><br><span class="line">ToArray()//将ArrayList的元素复制到新的数组中</span><br><span class="line">ToString()//返回当前Object的String</span><br><span class="line">TrimTpSize()//将容量设置为ArrayList中元素的实际数目</span><br></pre></td></tr></table></figure></p><hr><h3 id="动态数组的应用"><a href="#动态数组的应用" class="headerlink" title="动态数组的应用"></a>动态数组的应用</h3><p>添加数组元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list=new ArrayList();</span><br><span class="line">list.Add(1);</span><br><span class="line">list.insert(3,0);</span><br></pre></td></tr></table></figure></p><p>由于ArrayList中元素的类型位Object，若要使用foreach语句则为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foreach (object obj in list)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>删除数组元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.Remove(2);</span><br><span class="line">list.RemoveAt(1);</span><br><span class="line">list.RemoveRange(2,5);</span><br></pre></td></tr></table></figure></p><hr><p>打这么多名字有点累，可能会出错，但是报错应该还是很友好的，百度一下就知道该怎么用了。</p><h2 id="OK-THANKS-FOR-READING-BYE-BYE"><a href="#OK-THANKS-FOR-READING-BYE-BYE" class="headerlink" title="OK,THANKS FOR READING.BYE BYE~"></a>OK,THANKS FOR READING.BYE BYE~</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于之前学过Java的相关知识，但是由于Java在桌面程序表现的无力，决定选择新的语言，在QT和C#中还是选择了C#，不瞎扯了，我也不会扯，简单粗暴一点，C#语法和Java也很类似。&lt;br&gt;老规矩，我写的教程一向都是伪教程，指不定哪天我都看不懂的那种。&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
      <category term="C#" scheme="https://bluerbk.top/categories/C/"/>
    
    
      <category term="编程" scheme="https://bluerbk.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C#" scheme="https://bluerbk.top/tags/C/"/>
    
      <category term="dotnet" scheme="https://bluerbk.top/tags/dotnet/"/>
    
      <category term="Microsoft" scheme="https://bluerbk.top/tags/Microsoft/"/>
    
  </entry>
  
  <entry>
    <title>使用HEXO+GITHUB搭建自己的博客</title>
    <link href="https://bluerbk.top/2018/03/15/hexo_use/"/>
    <id>https://bluerbk.top/2018/03/15/hexo_use/</id>
    <published>2018-03-15T15:47:44.000Z</published>
    <updated>2018-03-17T15:53:01.433Z</updated>
    
    <content type="html"><![CDATA[<p>博客这个东西很多网站都有，什么博客园、CSDN、简书之类的。上周还在考虑在网站上写博客，因为我一直都是自己在本地写word或者txt来记录的。突发奇想自己搭一个博客来写，又高大上还记录了还练手了。说做就做，用了两天时间差不多把基本功能实现了。</p><h4 id="使用的工具和环境"><a href="#使用的工具和环境" class="headerlink" title="使用的工具和环境"></a>使用的工具和环境</h4><ul><li>Windows7 x64</li><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js v8.1</a></li><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git 2.16.2</a></li><li><a href="http://markdownpad.com/" target="_blank" rel="noopener">MarkdownPad 2</a></li></ul><p>本文主要说一下博客的搭建，hexo和github联系起来，初步发布文章，修改主题，还会说一些存在的坑。（随缘配图）<br><a href="https://www.appinn.com/markdown/#img" target="_blank" rel="noopener">点击此处查看Markdown语法说明</a></p><h2 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h2><h3 id="node-js的安装"><a href="#node-js的安装" class="headerlink" title="node.js的安装"></a>node.js的安装</h3><p>运行node.js安装包，一路next，完成安装，退出。<br>随后打开控制台界面（ctrl-R，输入cmd回车）<br>运行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>如果依次出现相对应的版本号，则表示安装成功。</p><h3 id="Git的安装和配置"><a href="#Git的安装和配置" class="headerlink" title="Git的安装和配置"></a>Git的安装和配置</h3><p>运行下载的Git安装包，进入Git的安装<br>当到了Git PATH的步骤时，选择“Use Git from the Windows Command Prompt“这个选项，这是为了将Git添加到系统环境变量里，不用再单独打开git bash运行命令了，cmd即可运行。<br>安装成功后，执行如下命令，若安装成功则会出现Git的版本号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git -version</span><br></pre></td></tr></table></figure></p><h3 id="github账号的注册和配置"><a href="#github账号的注册和配置" class="headerlink" title="github账号的注册和配置"></a>github账号的注册和配置</h3><p><a href="https://github.com/" target="_blank" rel="noopener">点击此处</a>或打开链接<a href="https://github.com/，进行账号注册" target="_blank" rel="noopener">https://github.com/，进行账号注册</a><br>之后进入注册时填的邮箱，确认账号，不然无法成功。注册成功后，点击右上角的头像，点击 New repository，在Repository name下填写yourname.github.io，即你的github page网站的名字（比如我的是 RBK.github.io)<br>创建成功后，代码库的右上角点击 Setting，向下找Github Page，选择master然后配置主题什么的，之后直接登录你的网站即可看到你的github page。<br>如登陆 blueprok.github.io/RBK.github.io 就是我的主页。在Setting页面的最右下也有写你的网站地址。</p><h3 id="HEXO的安装和配置"><a href="#HEXO的安装和配置" class="headerlink" title="HEXO的安装和配置"></a>HEXO的安装和配置</h3><p>最关键的地方来了，我在搭建的时候就在这折腾了一天。后面会写碰到的问题。关于安装hexo好像很有争议，在此我写一个我用的方法：<br>在一个位置新建一个文件夹，最好是某个盘的根目录吧，比如我的位置时 D：\hexo，然后运行以下命令，Hexo就安装成功了。可以通过查看版本判断是否安装成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure></p><p>随后进行创建站点。以此执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init [new empty folder]</span><br><span class="line">cd [new empty folder]</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>切记一定要是一个空的文件夹不然会报错，之后的所有步骤都要在<strong>[new empty folder]</strong>这个目录下执行命令<br>还有要注意<strong>node.js版本</strong>，最开始我就因为node.js版本太低，导致安装hexo失败，因为npm安装的hexo是最新的，node版本也需要更新。<br>执行完命令后执行以下命令，来生成静态页面<br><code>hexo g</code><br>或者<br><code>hexo generate</code></p><p>执行<code>hexo s</code><br>或者<br><code>hexo server</code><br>来开启本地web服务,会提示<br><code>INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code><br>在浏览器中输入<a href="http://localhost:4000/即可看到网页了。" target="_blank" rel="noopener">http://localhost:4000/即可看到网页了。</a></p><h3 id="将github-page和hexo联系起来"><a href="#将github-page和hexo联系起来" class="headerlink" title="将github page和hexo联系起来"></a>将github page和hexo联系起来</h3><p>执行命令来设置Git账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;BluePROK&quot;</span><br><span class="line">git config --global user.email &quot;568406972@qq.com&quot;</span><br></pre></td></tr></table></figure><p>生成密钥（登录时需要，执行命令后按三次回车即可)<br><code>ssh-keygen -t rsa -C &quot;568406972@qq.com&quot;</code><br>如果提示找不到命令，说明ssh-keygen没有配置环境变量，切换路径到Git\usr\bin即可运行ssh-keygen。在Users文件夹里搜索密钥文件***.pub，把它打开，复制里面的内容。打开github的账户Setting，设置SSH安全，标题随便写，把pub内容复制出来完成即可，不然后面会出现无法提交网页到github的情况。<br>在根目录的_config.yml里找到Deploy，修改信息</p><ol><li>deploy:</li><li>type: git</li><li>repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:BluePROK/RBK.github.io.git</li><li>branch: master<br>这样就配置完成了</li></ol><p>新建博客，执行命令<br><code>hexo new post &quot;article title&quot;</code></p><p>会在hexo的根目录source_post里看到artitle title.md，这就是发布的文章，语法为Markdown。<br>执行命令发布文章，每次修改都要这样<br><code>hexo d -g</code><br>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>到目前为止hexo博客搭建完成，访问 blueprok.github.io/RBK.github.io即可看到我的网页。</p><p>PS.可能需要一个扩展，命令如下<br><code>npm install hexo-deployer-git --save</code></p><p>在此列出借鉴的两个文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://blog.csdn.net/gdutxiaoxu/article/details/53576018</span><br><span class="line">https://www.cnblogs.com/blogjun/articles/8289977.html</span><br></pre></td></tr></table></figure><h2 id="主题的设置"><a href="#主题的设置" class="headerlink" title="主题的设置"></a>主题的设置</h2><p>这是HEXO的主页：<a href="https://hexo.io/，上面有关于hexo的安装、命令、使用、主题等各种内容。" target="_blank" rel="noopener">https://hexo.io/，上面有关于hexo的安装、命令、使用、主题等各种内容。</a><br>我在这个网站上找的一个主题BlueLake，巧了，正好也是Blue，地址是这个<br><a href="http://chaoo.oschina.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html" target="_blank" rel="noopener">http://chaoo.oschina.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html</a><br>这是完整的教程，可以跟着做，我就不一一写出来了。<br>更换主题的时候也有一个小问题，hexo s本地网站主题更换了，但是更新github主题却无法显示出来。这是第二个难题，经过多方查找，需要修改以下配置文件，根_config.yml里的URL属性修改一下，我是这样修改的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url: https://blueprok.github.io/RBK.github.io/</span><br><span class="line">root: /RBK.github.io</span><br></pre></td></tr></table></figure></p><p>url的属性即为github page网站的地址，root属性为github page仓库项目的名字。然后再hexo d -g就可以成功修改github page的主题了。</p><h2 id="域名的绑定解析"><a href="#域名的绑定解析" class="headerlink" title="域名的绑定解析"></a>域名的绑定解析</h2><p>购买了域名之后，供应商都应该提供解析服务，我用的是阿里云，以这个为例。</p><ol><li>在阿里云控制台，设置主机记录www，记录类型为A，记录值是IP192.30.252.153。其中192.30.252.153是Github Pages服务器指定的IP地址，访问该IP地址即表示访问Github Pages。</li><li>在阿里云控制台，设置主机记录www，记录类型为A，记录值是IP192.30.252.154。同上。</li><li>在阿里云控制台，设置主机记录@，记录类型为CNAME，记录值是bluerbk.github.io.。表示将<a href="http://bluerbk.top这个主域名映射bluerbk.github.io。在这里千万不要忘记记录值中.io后面还有一个点.！" target="_blank" rel="noopener">http://bluerbk.top这个主域名映射bluerbk.github.io。在这里千万不要忘记记录值中.io后面还有一个点.！</a></li></ol><hr><p>解析设置完成之后，在本地hexo\source新建一个文件，名字为CNAME，不要后缀，内容为域名即可（即bluerbk.top)。因为如果在github上建立文件的话下次上传的时候这个文件就被覆盖了，所以添加到本地文件，以便每次都可以保证上传，不丢失。<br>但是此时需要修改一下根_config.yml的配置信息，即上文所说的URL信息，修改为如下，否则主题又将不能应用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url: https://bluerbk.top/</span><br><span class="line">root: /</span><br></pre></td></tr></table></figure></p><h2 id="OK-THANKS-FOR-READING-BYE-BYE"><a href="#OK-THANKS-FOR-READING-BYE-BYE" class="headerlink" title="OK,THANKS FOR READING.BYE BYE~"></a>OK,THANKS FOR READING.BYE BYE~</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博客这个东西很多网站都有，什么博客园、CSDN、简书之类的。上周还在考虑在网站上写博客，因为我一直都是自己在本地写word或者txt来记录的。突发奇想自己搭一个博客来写，又高大上还记录了还练手了。说做就做，用了两天时间差不多把基本功能实现了。&lt;/p&gt;
&lt;h4 id=&quot;使用的
      
    
    </summary>
    
      <category term="Hexo" scheme="https://bluerbk.top/categories/Hexo/"/>
    
    
      <category term="博客" scheme="https://bluerbk.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="https://bluerbk.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://bluerbk.top/2018/03/14/article-title/"/>
    <id>https://bluerbk.top/2018/03/14/article-title/</id>
    <published>2018-03-14T15:29:26.697Z</published>
    <updated>2018-03-14T15:38:04.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Welcome-to-MarkdownPad-2"><a href="#Welcome-to-MarkdownPad-2" class="headerlink" title="Welcome to MarkdownPad 2"></a>Welcome to MarkdownPad 2</h2><p><strong>MarkdownPad</strong> is a full-featured Markdown editor for Windows.</p><h3 id="Built-exclusively-for-Markdown"><a href="#Built-exclusively-for-Markdown" class="headerlink" title="Built exclusively for Markdown"></a>Built exclusively for Markdown</h3><p>Enjoy first-class Markdown support with easy access to  Markdown syntax and convenient keyboard shortcuts.</p><p>Give them a try:</p><ul><li><strong>Bold</strong> (<code>Ctrl+B</code>) and <em>Italic</em> (<code>Ctrl+I</code>)</li><li>Quotes (<code>Ctrl+Q</code>)</li><li>Code blocks (<code>Ctrl+K</code>)</li><li>Headings 1, 2, 3 (<code>Ctrl+1</code>, <code>Ctrl+2</code>, <code>Ctrl+3</code>)</li><li>Lists (<code>Ctrl+U</code> and <code>Ctrl+Shift+O</code>)</li></ul><h3 id="See-your-changes-instantly-with-LivePreview"><a href="#See-your-changes-instantly-with-LivePreview" class="headerlink" title="See your changes instantly with LivePreview"></a>See your changes instantly with LivePreview</h3><p>Don’t guess if your <a href="http://markdownpad.com" target="_blank" rel="noopener">hyperlink syntax</a> is correct; LivePreview will show you exactly what your document looks like every time you press a key.</p><h3 id="Make-it-your-own"><a href="#Make-it-your-own" class="headerlink" title="Make it your own"></a>Make it your own</h3><p>Fonts, color schemes, layouts and stylesheets are all 100% customizable so you can turn MarkdownPad into your perfect editor.</p><h3 id="A-robust-editor-for-advanced-Markdown-users"><a href="#A-robust-editor-for-advanced-Markdown-users" class="headerlink" title="A robust editor for advanced Markdown users"></a>A robust editor for advanced Markdown users</h3><p>MarkdownPad supports multiple Markdown processing engines, including standard Markdown, Markdown Extra (with Table support) and GitHub Flavored Markdown.</p><p>With a tabbed document interface, PDF export, a built-in image uploader, session management, spell check, auto-save, syntax highlighting and a built-in CSS management interface, there’s no limit to what you can do with MarkdownPad.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Welcome-to-MarkdownPad-2&quot;&gt;&lt;a href=&quot;#Welcome-to-MarkdownPad-2&quot; class=&quot;headerlink&quot; title=&quot;Welcome to MarkdownPad 2&quot;&gt;&lt;/a&gt;Welcome to Mar
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://bluerbk.top/2018/03/14/hello-world/"/>
    <id>https://bluerbk.top/2018/03/14/hello-world/</id>
    <published>2018-03-14T15:06:10.005Z</published>
    <updated>2018-03-14T15:06:10.005Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
